// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ctl.proto

package ctl

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestStat struct {
	Sum                  int32    `protobuf:"varint,1,opt,name=sum,proto3" json:"sum,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestStat) Reset()         { *m = RequestStat{} }
func (m *RequestStat) String() string { return proto.CompactTextString(m) }
func (*RequestStat) ProtoMessage()    {}
func (*RequestStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{0}
}
func (m *RequestStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestStat.Unmarshal(m, b)
}
func (m *RequestStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestStat.Marshal(b, m, deterministic)
}
func (m *RequestStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestStat.Merge(m, src)
}
func (m *RequestStat) XXX_Size() int {
	return xxx_messageInfo_RequestStat.Size(m)
}
func (m *RequestStat) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestStat.DiscardUnknown(m)
}

var xxx_messageInfo_RequestStat proto.InternalMessageInfo

func (m *RequestStat) GetSum() int32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *RequestStat) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReleaseCtl struct {
	ReleaseTime          int64    `protobuf:"varint,1,opt,name=releaseTime,proto3" json:"releaseTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseCtl) Reset()         { *m = ReleaseCtl{} }
func (m *ReleaseCtl) String() string { return proto.CompactTextString(m) }
func (*ReleaseCtl) ProtoMessage()    {}
func (*ReleaseCtl) Descriptor() ([]byte, []int) {
	return fileDescriptor_0646114e50303026, []int{1}
}
func (m *ReleaseCtl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseCtl.Unmarshal(m, b)
}
func (m *ReleaseCtl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseCtl.Marshal(b, m, deterministic)
}
func (m *ReleaseCtl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseCtl.Merge(m, src)
}
func (m *ReleaseCtl) XXX_Size() int {
	return xxx_messageInfo_ReleaseCtl.Size(m)
}
func (m *ReleaseCtl) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseCtl.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseCtl proto.InternalMessageInfo

func (m *ReleaseCtl) GetReleaseTime() int64 {
	if m != nil {
		return m.ReleaseTime
	}
	return 0
}

func init() {
	proto.RegisterType((*RequestStat)(nil), "ctl.RequestStat")
	proto.RegisterType((*ReleaseCtl)(nil), "ctl.ReleaseCtl")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CtlClient is the client API for Ctl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CtlClient interface {
	CtlStream(ctx context.Context, opts ...grpc.CallOption) (Ctl_CtlStreamClient, error)
}

type ctlClient struct {
	cc *grpc.ClientConn
}

func NewCtlClient(cc *grpc.ClientConn) CtlClient {
	return &ctlClient{cc}
}

func (c *ctlClient) CtlStream(ctx context.Context, opts ...grpc.CallOption) (Ctl_CtlStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Ctl_serviceDesc.Streams[0], "/ctl.Ctl/CtlStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ctlCtlStreamClient{stream}
	return x, nil
}

type Ctl_CtlStreamClient interface {
	Send(*RequestStat) error
	Recv() (*ReleaseCtl, error)
	grpc.ClientStream
}

type ctlCtlStreamClient struct {
	grpc.ClientStream
}

func (x *ctlCtlStreamClient) Send(m *RequestStat) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ctlCtlStreamClient) Recv() (*ReleaseCtl, error) {
	m := new(ReleaseCtl)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CtlServer is the server API for Ctl service.
type CtlServer interface {
	CtlStream(Ctl_CtlStreamServer) error
}

func RegisterCtlServer(s *grpc.Server, srv CtlServer) {
	s.RegisterService(&_Ctl_serviceDesc, srv)
}

func _Ctl_CtlStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CtlServer).CtlStream(&ctlCtlStreamServer{stream})
}

type Ctl_CtlStreamServer interface {
	Send(*ReleaseCtl) error
	Recv() (*RequestStat, error)
	grpc.ServerStream
}

type ctlCtlStreamServer struct {
	grpc.ServerStream
}

func (x *ctlCtlStreamServer) Send(m *ReleaseCtl) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ctlCtlStreamServer) Recv() (*RequestStat, error) {
	m := new(RequestStat)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Ctl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ctl.Ctl",
	HandlerType: (*CtlServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CtlStream",
			Handler:       _Ctl_CtlStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ctl.proto",
}

func init() { proto.RegisterFile("ctl.proto", fileDescriptor_0646114e50303026) }

var fileDescriptor_0646114e50303026 = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2e, 0xc9, 0xd1,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x2e, 0xc9, 0x51, 0x32, 0xe5, 0xe2, 0x0e, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x09, 0x2e, 0x49, 0x2c, 0x11, 0x12, 0xe0, 0x62, 0x2e, 0x2e, 0xcd,
	0x95, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0x31, 0x85, 0x44, 0xb8, 0x58, 0x93, 0xf3, 0x4b,
	0xf3, 0x4a, 0x24, 0x98, 0xc0, 0x62, 0x10, 0x8e, 0x92, 0x1e, 0x17, 0x57, 0x50, 0x6a, 0x4e, 0x6a,
	0x62, 0x71, 0xaa, 0x73, 0x49, 0x8e, 0x90, 0x02, 0x17, 0x77, 0x11, 0x84, 0x17, 0x92, 0x99, 0x9b,
	0x0a, 0xd6, 0xcd, 0x1c, 0x84, 0x2c, 0x64, 0x64, 0xcd, 0xc5, 0x0c, 0x52, 0x68, 0xc2, 0xc5, 0xe9,
	0x5c, 0x92, 0x13, 0x5c, 0x52, 0x94, 0x9a, 0x98, 0x2b, 0x24, 0xa0, 0x07, 0x72, 0x0b, 0x92, 0xed,
	0x52, 0xfc, 0x50, 0x11, 0x98, 0xc1, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0xf7,
	0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x53, 0xf0, 0xa0, 0xbc, 0x00, 0x00, 0x00,
}
